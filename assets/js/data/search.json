[ { "title": "#002. 맥으로 개발 시작해보기 (내가 맥을 선택한 이유) [작성 중]", "url": "/posts/2-macbook-setup/", "categories": "Dev, Essay", "tags": "dev essay, os, windows, mac", "date": "2022-06-29 18:46:23 +0900", "snippet": "\"Windows와 Mac, 둘 중 개발자에게 좋은 운영체제는 무엇인가?\" 라는 내용은 아직도 여러 플랫폼에서 핫하게 의논되고 있을 만큼 자극적인 주제이다. 이번 포스팅에서는 이런 질문에 대한 나의 생각과 그래서 내가 맥을 선택한 이유가 무엇인지, 그리고 내가 사용하고 있는 맥북 셋업 방법에 대해 기록을 남겨두려 한다.운영체제(Operation System)란?먼저 우리가 사용하는 컴퓨터는 모두 기본적으로 운영체제(Operation System)가 있기에 동작한다. 다시 말해 컴퓨터를 사용하려면 반드시 필요한 소프트웨어(Software)가 바로 운영체제인 것이다. 영어로는 Operation System, 줄여서 OS라 불리는데 흔히 알려져있는 대표적인 컴퓨터 OS로 마이크로소프트(Microsoft)의 윈도우(Windows)와 애플(Apple)의 맥OS(macOS) 등이 있다.OS의 주된 역활은 컴퓨터의 하드웨어(Hardware)를 관리하는 것인데 모니터, 마우스, 키보드와 같은 외부 장치부터 본체 내부에 있는 CPU, 메모리, 디스크와 같은 내부 장치 등 다양한 하드웨어를 보다 더 효율적으로 관리하여 컴퓨터의 성능을 더 좋게 만들어주는 것이다. 또한 OS는 사용자에게 편의를 제공하는 목적도 가지고 있기 때문에 버전이 올라갈 수록 사용자에게 친화적이고 직관적인 화면 구성과 함께 보다 더 쉬운 사용 방법을 제공하는 등 계속해서 발전하고 있다.전세계 OS 점유율 조사기관으로 가장 유명한 StatCounter의 통계21.06~22.06에 따르면 데스크탑(Desktop) 기준 OS 시장 점유율에서 윈도우가 약 72%, 맥이 15%, 그 외 나머지가 13%정도를 차지하고 있다고 한다. 다시 말해 전세계 사람들의 대부분이 윈도우 컴퓨터를 사용하고 있다는 것이다. 하지만 15%의 낮은 수치라해도 맥을 사용하는 사람들이 있다는 것을 알 수 있는데, 대부분 음악이나 영상 편집, 디자이너 등과 같은 전문적인 분야의 종사자나 개발자 등으로 이루어져 있다고 한다.윈도우(Windows)와 맥(Mac)윈도우는 점유율 72%답게 우리나라에서도 컴퓨터를 접해온 세대라면 무엇인지 잘 알고 있고 사용방법에도 이미 익숙해져있다. 삼성, LG와 같은 국내 대기업들은 물론, 해외 대부분의 브랜드에서 컴퓨터의 기본 OS로 윈도우를 탑재하는 경우가 많기 때문이다. 또한 윈도우는 맥과 비교했을 때 압도적인 사용자 수로 인해 범용성 측면에서 훨씬 뛰어나다는 평가를 받고 있으며 나 역시 컴퓨터를 처음 접했을 때 경험했던 OS가 Windows XP였다. 현재 윈도우의 가장 최근 버전은 Windows 11이라고 한다.맥(Mac)은 원래 애플에서 만든 PC인 Macintosh(매킨토시)의 줄임말이다. 현재는 애플에서 만든 맥 전용 OS의 이름 또한 macOS가 되면서 맥은 운영체제 그 자체 또는 맥 제품들을 아울러 부르는 의미가 되었다. 또한 맥 제품들 중 노트북 라인업으로 MacBook(맥북)이라 불리는 장비가 사람들에게 가장 흔히 알려져 있으며 나 역시 맥북을 사용하고 있다. 스타벅스에 가면 볼 수 있다. 하지만 윈도우만을 사용해본 사람들에게는 배우기 어려운 OS라고 인식되어있다.각종 채용 플랫폼에서 개발 관련 채용공고를 보면 맥을 사용하는 기업이 생각보다 많다는 것을 알 수 있는데 보통 윈도우와 맥 둘 중 사용하기 편한 장비를 자율적으로 선택하라하거나 둘 다 사용하는 경우도 있다고 한다. 하지만 이는 기업의 문화와 기술 스택, 프로젝트의 종류에 따라 천차만별이며 당연히 윈도우만을 사용하는 기업도 분명히 있다. 또한 나는 윈도우를 사용하는게 나쁘다고 생각하지는 않는다.두 OS에 대한 나의 생각구글링을 하면 흔히 검색되는 ‘애플 제품∙맥 OS를 사용하는 N가지 이유’ 같은 글을 보면 기술적인 측면, 디자인적인 측면 등에서 상세히 설명되어 있는 것을 확인할 수 있다. 물론 사용하지 ‘않는’ 이유또한 잘 정리되어 있으며 아이폰(iOS) 앱 개발, 파이널 컷 등과 같은 맥 전용 소프트웨어, CUI 환경 등 개발관련 지식이 있다면 공감할 수 있는 이유들이다. 하지만 나는 이런 형식적인 내용과는 조금 다른 이야기를 하고 싶었다.기술적인 측면에서 윈도우와 맥은 둘 다 이미 충분한 상향평준화를 이루었다고 생각한다. 애플의 M1칩 이후부터는 보다 뛰어난 성능의 맥을 합리적인 가격으로 선택할 수 있게 되었고, 맥에서만 할 수 있다던 몇몇 일들은 요즘에는 윈도우에서도 충분히 할 수 있다고 한다. 물론 아직까지도 특별한 경우나 스택 때문에 어느 한쪽에서만 개발이 가능한 경우가 남아있겠지만 기술이 발전함과 동시에 이러한 문제들은 점차 줄어들게 될 것이라 생각한다.다시 말해 일반적인 경우에서는 맥과 윈도우 어느 쪽을 선택하든 크게 지장이 없다는 것이다. 특별한 스택을 개발하기 위해 해당 OS 환경이 반드시 필요하다거나, 회사에서 모두 특정 OS를 사용하고 있다거나 하는게 아니라면 요새는 대부분 클라우드 환경에서 서비스가 동작하기 때문에 개인이 어떤 OS와 장비를 선택하여 개발을 하든 협업에 있어서 크게 영향이 없을 것이라는게 내 생각이다. 네? 제가 맥을 선택한 이유요? 그냥 제가 좋아서요.. 😅나도 한 번 써보자 맥북작년 이 맘때 쯤 처음 맥북을 구매하고 사용하기 시작 했었다. 나는 대학교에서 아이맥(iMac)을 사용해본적이 있었고 이미 아이폰(iPhone)과 아이패드(iPad)를 사용하고 있었던터라 윈도우와는 다른 맥의 화면에 크게 낯설지는 않았다. 하지만 새로 산 프라이팬은 길들여주는 과정이 필요하듯 맥OS 역시 기본적으로 설정 해주어야 하는 것들이 있다는 것을 그 때의 난 잘 몰랐었고 그냥 있는 그대로 사용하기만 했었다. 기본적인 시스템 설정과 개발환경 설정 등에 대해 공부한 후부터는 맥을 보다 개발자 스럽게 사용할 수 있게 되었다. 셋업 내용은 맥을 처음 접한 사람보다는 이미 어느정도 맥의 화면에 익숙해진 사람이 개발자로서 개발 환경을 설정한다 했을 때 빠르게 참고 할 수 있는 글이라는 느낌으로 작성해보았다.시스템 설정 먼저 맥은 기본적으로 윈도우와는 다른 UI의 화면으로 구성되어 있다" }, { "title": "#001. 기술 블로그(Engineering Blog)와 깃허브(GitHub)", "url": "/posts/1-engineering-blog-and-github/", "categories": "Dev, Essay", "tags": "dev essay, engineering blog, github, git", "date": "2022-06-28 20:12:09 +0900", "snippet": "처음 기술 블로그라는 걸 알게 되었을 때 “이거, 나도 만들어야겠다.” 라는 생각이 들었다. 하지만 다른 개발자들도 그랬을 것 같은데 이는 절대 쉽지 않았다. 개발자가 블로그를 만드는 게 어렵냐고? 아니다. 만드는 거 자체야 당연히 어렵지 않다. 다들 알겠지만, 문제는.. 개발자는 글을 쓰는 것보다 코딩하는게 차라리 더 편하다는 것이다.기술 블로그(Engineering Blog)란?보통 기술 블로그는 IT 기업에서 운영하는 블로그를 말한다. “우리 회사에서는 이런 식으로 서비스를 개발하고 이런 기술력을 가지고 있으며, 이런 이슈와 부딪히고 고민하고 해결합니다.” 이러한 내용들의 포스트가 올라오는 블로그라 보면 된다. 하지만 반드시 기업에서만 기술 블로그를 운영할 수 있는 건 아니다. 개인 개발자가 운영하는 개발 관련 블로그도 기술 블로그라 불린다.영어로는 Engineering Blog 또는 Tech Blog, Developer Blog라 불린다고 한다. 부르는 이름이야 다를 수 있겠지만 중요한 건 일반 블로그와는 명확히 그 특징이 구분된다는 점이다. 나는 일반적인 블로그는 일종의 정보 공유 글 모음 또는 개인의 일상을 기록해두는 일기장 정도라고 생각했다. 그런데 기업이나 개인의 기술력을 글로 정리해서 올려두는 블로그라니, “다른 경쟁자가 보면 어쩌지?” 라는 생각이 들었다.하지만 기술 블로그는 그런 의도로 운영되는 게 아니었다. 기술의 자랑이라기보다는 일종의 토론장이었다. 서로서로 상대방이 쓴 블로그를 참조해가며 나아가 최종적으로 해당 분야의 발전으로 이어지는 맥락이었다. 누군가 잘못된 방법이나 비효율적인 방법을 사용하는 것을 발견했다면 다른 방법을 알려줄 수도 있고 반대로 내가 새로운 방법을 배워갈 수도 있다는 것이다. 구글링또한 기업에서 이러한 내용의 블로그를 운영하고 있다면 새로운 인재 채용의 발돋움 대가 될 수도 있다. 당신이 이직을 앞두고 어떤 기업의 기술 블로그를 통해 최근 그 기업이 당신이 관심 있어 하는 분야의 프로젝트를 진행하고 있다는 내용의 글을 보았다. 그러면 그 기업으로 입사 지원을 해봐야겠다고 생각하게 될 수도 있지 않겠는가?마찬가지로 만약 개인이 이런 기술 블로그를 운영하고 있다면 포트폴리오로써 활용될 수도 있다. 당신이 여태까지 매일 관심 가져 공부하고 개발했던 내용들을 하나씩 블로그에 올려두기만 해도 이것을 나중에 이력서 참고내역으로 제출할 수 있을 것이다. 반대로 어떤 기업의 채용 담당자가 당신이 쓴 블로그 글을 우연히 보고 면접을 보러 오지 않겠느냐고 연락이 올지도 모를 일이다. 📬 기업의 기술 블로그에 해당 기업의 모든 기술이 올라와 있을리는 없다. 게다가 어차피 나는, 올려둘 기술이랄 것도 없다..블로그를 만드는 방법인터넷을 접해온 세대부터는 각각 애용하는 포털 사이트가 있을 것이다. 그 중 누구나 한 번쯤은 들어봤을 네이버나 다음 같은 경우는 계정을 만들었을 때 블로그를 만들 수 있다. 이를테면 네이버 블로그, 티스토리 등이 있다. 이외에도 워드프레스Wordpress, 고스트Ghost, 벨로그Velog, 미디움Medium, 브런치Brunch 등 블로그를 만드는 다양한 방법이 있다고 한다. 참고 : 기술 블로그(Engineering Blog)란? | 44BITS현재 이 블로그가 만들어져 있는 플랫폼, 내가 선택한 방법은 바로 깃허브(GitHub)에서 제공하는 깃허브 페이지(GitHub Pages)라는 서비스였다. 이전 포스트 마지막에서 언급했던 포트폴리오에 기술 블로그와 깃허브를 이용하겠다는 부분, 깃허브 페이지를 이용해 기술 블로그를 만들게 되면 다른 방법을 이용하는 것보다 좀 더 이 부분과 많이 겹치게 되기 때문이었다. 깃, 깃허브, 깃허브 페이지. 자꾸 깃 깃 하는데 그럼 도대체 이 깃(Git)이란 건 무엇일까? 🤔깃(Git)이란?만약 당신이 A, B, C라는 3명의 개발자와 함께 네 명이 한 팀으로 메신저 앱을 개발한다 생각해보자. 팀은 또, 두 부서로 나뉘어 당신은 A와 함께 친구 목록 화면을 맡았고, 나머지 B, C 두 명은 다른 화면을 맡았다. 이제 당신은 친구 목록 화면에 필요한 기능들을 A와 적절히 나누어 맡아 따로 개발을 시작했는데, 중간중간 기능들을 합쳐서 화면이 잘 나오고 있는지 테스트해야 했다. 이때 당신은 같은 부서원 A에게 당신이 만든 기능 부분을 어떤식으로 공유할 것인가? 내가 짠 코드 카톡으로 보내기!?또 다른 예로, 당신은 어떠한 기능을 하는 한 파일을 A와 함께 작업해야 하는 상황이 있을 수도 있다. 한 파일 내에서 번갈아가며 기능을 구현해내야 하는 상황이라는 것인데, 어떻게 매번 소스코드를 토스할 것인가? “제가 137번째 줄부터 184번째 줄까지 작성해뒀어요. 이제 A님이 185번째 줄부터 짜시면 되요!” 라고 전달할 것인가? 아니면 그냥 마지막에 하나로 합치는 방법을 선택한다 해도 그럼 어떻게 그 내용을 일일히 비교해서 합칠 것인가? 🫢마지막 예로, 최종 단계인 배포를 앞두고 나뉘었던 두 부서의 화면들을 모두 합쳐 메신저 앱을 완성해야 한다. 그러면 또 네 명이 한데 모여 퍼즐 맞추듯 코드 조각들을 맞추고 있어야 할까? 이쯤되면 그냥 누군가 일정한 때마다 알아서 수정된 사항들을 정리해주고 차곡차곡 소스코드를 쌓아줬으면 한다는 생각이 들게 될 것이다. 깃은 바로 이런 상황들에 유용하게 쓰일 수 있는 시스템이다. 여러명의 개발자들이 하나의 프로젝트를 개발해낼 때, 협업이 필요한 때, 깃은 빛을 발하게 된다.깃과 같은 시스템을 ‘분산 버전 관리 시스템 : 알아서 파일의 변경 사항을 추적해주고 여러 명의 사용자 간에 작업 순서나 그 내역을 조율해주는 시스템’ 이라 부르며, 깃은 그 중 한 종류이다. 이름 그대로 깃을 활용해 파일의 버전을 쉽게 관리할 수 있다. 새로운 업데이트가 생길때 마다 새 파일을 만들 필요 없이 버전을 붙여주며 갱신할 수 있는 것이고 그렇기에 예전의 버전으로도 언제든 쉽게 돌아갈 수 있다. 안녕하십니까? 신입 개발자 입니다. 네? 깃을 안 쓴다고요?.. 😨 안녕히계세요.깃허브(GitHub)란?깃을 이용해 버전 관리를 하게 되면 그 내역들이 쌓일 저장소가 필요하다. 매번 변경사항이 담긴 문서가 나올 때 그 문서들을 정리해둘 수 있는 문서함 같은 공간 말이다. 그리고 우리는 이 저장소를 이미 가지고 있다. 바로 당장 쓰고 있는 컴퓨터 즉, 로컬 환경이다. 문제는 팀 프로젝트로써 협업이 필요할 때에는 개개인의 로컬 저장소가 아닌 온라인으로 공유되는 저장소가 필요할 것이다. 우리는 이를 리모트 저장소 즉, 원격 저장소라 부른다. 깃허브는 바로 이 원격 저장소를 제공해주는 웹 호스팅 서비스1인 것이다.심지어 깃허브는 이러한 서비스를 무상💸으로 제공해준다. 당신이 당신의 프로젝트를 오픈소스2로써 깃허브에 올려둔다면 말이다. 그렇기에 깃허브는 오픈소스들의 바다, 또 웹 서비스인 만큼 편리한 UI와 커뮤니케이션 기능이 잘 되어 있기 때문에 개발자들의 SNS라고도 불린다. 다른 사람들이 만든 코드를 도서관에서 책을 빌려 보듯 언제든 참고할 수 있고, 또 이를 내 로컬 저장소에 가져와 그 프로젝트에 팀원으로서 참여해 기여할 수도 있으며, 내가 올린 코드들을 다른 사람들이 보고 의견을 달아줄 수도 있다.다시말해 깃과 깃허브를 이용한다면 장소와 장비에 제한 받지 않고 언제 어디서든 개발을 이어나갈 수 있다는 것이다. 그렇기 때문에 당신은 당신이 만든 모든 프로젝트를 자연스럽게 깃허브에 업로드 해둘 것이다. 그렇다면 우리는 이런 생각이 들지도 모른다. \"이거 이력서가 따로 필요 없겠는걸?\" 그렇다. 요즘은 기업에서 단순히 깃허브 프로필 주소만을 요구할 때도 있다. 우리는 URL 주소 하나만으로 우리를 어필 할 수 있게 된 것이다.깃허브 페이지(GitHub Pages)란?내가 만든 프로젝트와 그 소스코드들은 모두 깃허브에 업로드해두고 그에 따른 자세한 설명이나 내 생각은 기술 블로그에 기록해둔다. 이게 바로 내가 생각해둔 포트폴리오 준비 계획이다. 그렇다면 블로그를 만드는 다양한 방법 중에서 내가 깃허브 페이지를 선택한 이유는 무엇일까. 먼저 위에서 얘기했듯 깃허브에서 제공하는 서비스이기에 자연스럽게 깃허브의 사용 빈도가 많아질테고 다른 기능들도 활용해보게 될거기 때문이다.또 가장 큰 이유는 바로 깃허브 페이지가 역시 무상이기 때문 개발자가 사용하기에 편리하기 때문이다. 깃허브 페이지 홈페이지에 들어가 보면 하단 부분에 Jekyll이라는 것을 이용해보라고 나와 있다. 제키라고 읽는지 제킬이라고 읽는지 모르겠는데 아무튼, 제키는 Ruby를 기반으로 만들어진 정적 사이트 생성기로써 지금 내 블로그에도 사용되었다. 자세한 기술적인 내용은 앞으로 블로그 만들기, 커스터마이징 과정 포스트에서 이어서 다루어보려 한다.아무튼 어느 정도의 개발 지식만 알고 있다면 손쉽게 블로그를 만들어 낼 수 있고 여러 가지 테마를 개발자 측면에서 편리하게 수정하고 관리할 수 있다는 장점이 있다. .io 도메인과 같은 유료 도메인을 무료로 제공해주기도 하며 자동으로 https를 지원해준다. 물론 반대로 개발 지식이 부족한 일반인의 경우라면 오히려 이런 부분들은 단점이 될 수도 있다. 그 예로 포스트를 작성하는데에도 기본적인 별도의 세팅 환경이 갖추어져 있어야 한다. 참고 : 내가 개발 블로그 플랫폼으로 Github과 Jekyll을 선택한 이유 - 재그지그의 개발 블로그앞으로이번 포스트에서는 기술 블로그와 깃허브뿐만 아니라 다양한 용어가 많이 튀어나왔던 것 같다. 그래서 앞으로도 포스트를 쓸 때 누군가 내 블로그를 보고 도움이 될 수 있게 끔, 오늘 썼던 방법처럼 설명하는 듯한 내용으로 작성해보려 한다. 물론 이 내용들은 내 지식을 정리해서 올려두는 용도이기도 하다. 🙏🏻이제부터는 내가 맥(Mac)을 사용하게 된 계기와 다 까먹어 버렸던 깃을 복습했던 과정, 또 위에서 미쳐 다 다루지 못했던 깃허브 페이지를 이용해 블로그를 완성하고 커스터마이징까지 끝냈던 과정까지 모두 상세히 담아보려 한다. 그 이후에도 T.I.LToday I learned, 토이 프로젝트Toy Project 등 욕심이 많다보니 해야할게 산더미라.. 앞으로 더 열심히 해야할 것 같다. 웹 호스팅 서비스 : 웹에서 서버 컴퓨터 전체 또는 그 일부 공간만 임대 또는 제공하는 서비스를 말한다. &#8617; 오픈소스 : 오픈소스 소프트웨어(Open Source Software, OSS)를 뜻하는 용어로써 공개적으로 엑세스할 수 있게 설계되어 누구나 자유롭게 확인, 수정, 배포할 수 있는 코드를 말한다. &#8617; " }, { "title": "#000. 하던 일이 망했다.", "url": "/posts/0-blog-start/", "categories": "Dev, Essay", "tags": "dev essay", "date": "2022-06-27 19:26:24 +0900", "snippet": "사업은 굉장히 도전적이고 성공 가능성이 불확실한 일이다. 안정적인 직장과 고정적인 수입과는 거리가 멀다는 말이다. 그리고 어떤 종류의 사업이든 간에 확실한 비즈니스 모델과 그에 맞는 전략이 있어야 한다. 마지막으로 자금이 있다면 더 좋겠지만 사실 대부분의 무자본 시작 사업들은 투자 유치를 받기 위해 굉장히 애쓴다고 한다. 나는 이런 부분들을 알게 된 후에도 과감히 사업에 뛰어들었다.사업은 어려워대학교를 졸업하고 마음 맞는 사람들과 함께 팀을 꾸려 창업을 했던 적이 있다. 이게 내 첫 번째 도전이었다. 외국인들이 우리나라에 왔을 때 웹이나 앱을 통해 여러 랜드마크와 맛집 등의 정보를 제공받을 수 있는 서비스였는데, 흔히 알려진 정보가 아닌 한국인만이 알고 있는 로컬 한 정보를 제공해 준다는 부분에 차별점을 두었다.나는 프런트 엔드1(Front-end) 포지션을 맡았고 그 외에도 역할별 팀원들이 각각 있었기에 나름대로 구성이 갖춰진 채로 시작했다. 나중에는 사무실도 구했고 잘 흘러가는 듯했지만, 서비스 단계를 앞두고 마무리를 지어야 했던 상황이 벌어졌다. 지금은 잘 기억이 안 나지만 여러 가지 사연이 있었다.경험이 있다고 자신했던 걸까 아니면 아직도 정신을 못 차렸던 걸까, 군대를 전역하고 나는 친구 한 명과 함께 동업으로 또 사업을 준비했다. 이게 내 두 번째 도전이었다. 이번에는 웹이나 앱을 통한 서비스가 아닌 전혀 다른 주제의 사업이었는데, 온라인에서 물건을 떼다 파는 형식의 위탁 판매업2 이었다. 사업자 등록을 하고 쿠팡과 네이버 스마트 스토어에 입점한 뒤, 우리는 밤낮 없이 투잡과 공부(법, 재무, 세무 등)를 병행하며 열중했지만 역시나 아쉽게도 나중을 기약해야 했다. 하지만 두 개의 도전은 각각 많은 경험과 생각, 아픔을 남겼다고 한다.. 🥲개발자가 되기 위해원래 첫 번째 도전 이후, 군대에 갔던 나는 말년에 전역 후 개발자로 취직하기 위한 계획을 열심히 세웠다. 하지만 전역 후 이 계획은 잘 진행되지 않았고 노느라 바빴던 것 같다. 그러다 쓸 돈이 떨어지면 온라인 프리랜서 마켓에서 작게는 5만 원짜리 건, 크게는 100만 원을 조금 넘는 규모의 건들을 맡아 용돈을 마련했는데 그마저도 나중에는 손을 떼고 아르바이트를 전전했다.그렇다. 부끄럽지만 나는 개발자로서 이렇다 할 경력이 없었다. 용돈 마련을 위해 했던 프리랜서 건들은 실제로 필드에서 쌓는 커리어와는 거리가 멀었다. 그러던 중 두 번째 사업에 도전했던 것이었고 정말 미친 듯이 열심히 준비했지만, 사활을 걸었던 건 아니었을까.. 나는 다시 내 길로 돌아가기 위해 이렇게 다시 개발자를 준비하게 되었다.원래의 내 길흔한 이야기일 수도 있겠지만 나는 초등학생 때부터 컴퓨터에 관심이 많았다. 남들보다 디자인과 프로그래밍을 일찍부터 경험하기 시작했고 (어떤 이유로 그렇게 되었는지는 설명하기가 난감해 노코멘트.) 나날이 스택을 다양하게 늘리고 또 심화시켜 갔다. 그러던 중 특성화 고등학교를 진학하게 되면서 더 확실한 방향이 잡혔던 것 같다.그때 당시에는 지금처럼 정확한 포지션 이름을 알지 못했지만 나는 웹(Web) 쪽에 많은 흥미를 느꼈다. 포토샵(Photoshop)과 플래시(Flash)로 디자인을 만들어내고, 드림위버(Dreamweaver)를 이용해 마크업 하는 것을 좋아했다. 자바스크립트(Javascript)를 처음 접하게 되었을 때는 마치 신세계처럼 느껴졌었고 HTML 5와 웹 표준 등과 같이 그때 한창 새롭게 떠올랐던 화제들은 친구들과 열띤 토론을 하게 해주었던 주제였다.대학교에 가서 배웠던 커리큘럼들 중 웹과 관련된 기술적인 부분들은 아무래도 특성화고를 졸업한 내게 쉽게 느껴지는 부분이었다. 그래도 C와 자바(Java), JSP, Windows Server, DB 등 다양했던 과목들은 당시 대학 동기들에게는 수많은 관문이었다고 하지만 내게는 하루하루가 신나는 배움의 나날이었다. 물론 컴퓨터 개론, 자료구조, 네트워크 통신 등 이론적인 과목들은 나도 깨나 골머리를 앓았던 기억이 있다. 🤮 당시에는 웹 관련 교육 과목으로 플래시와 드림위버가 필수적으로 들어가 있었다. 하지만 플래시는 현재 공식적으로 지원이 종료되었고 드림위버는 VScode나 IntelliJ에 비해 웹 개발 도구로써는 점유율이 낮다.계획하지만 이런 내용들은 내가 아무리 날고 기었다 한들 개발자로 취직을 준비하는 데 있어 그냥 ‘전공자’라는 단어로 요약될 뿐이다. 지금은 전공자뿐만 아니라 비전공자들도 개발자가 되는 시대이고 회사에서 원하는 좋은 개발자가 될 수 있을 거라는 점을 보여주려면 나는 다른 경쟁 요소를 갖춰야만 했다.군대에서 생각했던 계획 중 하나는 확실한 💡포트폴리오를 준비하는 것이었다. 다른 직업들도 마찬가지겠지만 이 분야에 있어 나의 전문성과 관심을 증명하려면 말 그대로 내가 지금까지 어떻게 준비를 해왔는지, 뭘 다룰 수 있는지, 어떤 부분에 관심이 있는지 그리고 앞으로 뭘 할 것인지에 대해 보여줄 수 있어야 한다고 생각했다.전역하고 바로 실행에 옮긴 계획의 첫 번째는 맥북을 구매하는 거였다. ‘개발자들은 왜 맥(Mac) 운영체제를 사용할까?’ 라는 물음의 내용이 담긴 매체를 옛날부터 많이 접해왔고 나 역시 이에 친숙해지고 싶었다. 또 아쉽게도 내 학번이 졸업에 가까워진 시점에야 새로운 과목으로써 다뤄졌던 협업 툴들에 관련해서도 맥에서 공부하고 싶었다.백지 상태딱 지금으로부터 1년 전이었던 것 같다. 드디어 첫 맥북(MacBook Air M1 💻)을 구매하고 기본적인 개발 환경을 세팅한 다음 깃(Git)을 공부했었다. 그런데 다시금 들여다보니 역시나 다 까먹은 상태였다. 왜 이렇게 세팅해두었는지, 리눅스 과목에서 만점을 맞았던 기본적인 CLI 명령어들은 뭐가 있었는지 흐릿하게만 기억이 나는 상태였다.솔직히 말하면 내가 어떻게 시맨틱 마크업을 했었는지, 자바스크립트의 기본 문법은 무엇이 있었는지, 리엑트(React), 뷰(Vue) 등의 프레임 워크 ∙ 라이브러리, 그 외 로드맵에 있을 법한 내용들.. 모두 다 잘 기억이 나지 않는 상태였다. 다시 들여다보니 어렴풋이 조금씩 생각이 나긴 했지만.. 라고 면접 때 말을 할 수는 없었다. 😥결론적으로, 두 번의 도전을 마치고 다시 돌아온 지금의 나는 바로 경쟁에 뛰어들기엔 많이 모자란 상태였다. 요새 유행하는 부트 캠프3 같은 곳에 참가하는 것도 생각해 보긴 했다. 비난하려는 것은 아니지만 나는 남들과 똑같은 포트폴리오를 가진 채 면접을 보러 가고 싶지는 않았다. 물론 그 디테일한 단기 속성 커리큘럼은 확실히 궁금하지만, 내 나름의 방법대로 다시 처음부터 천천히 쌓아가보려 한다.먼저 기본적인 문법과 최신 기술의 달라진 점 등을 다시 공부하고, 예전에 만들어두었던 프로젝트들을 리팩토링 ∙ 마이그레이션 하는 등 업그레이드 하는 과정을 진행해 보려 한다. 이러한 과정을 한 번에 담고 시간 순서대로 자연스럽게 보여줄 수 있는 방법, 내가 계획했던 포트폴리오 준비는 바로 기술 블로그Engineering Blog와 깃허브(Github)를 이용하는 거였다. 프런트 엔드(Front-end) : 웹 개발 측면에서 볼 때 눈에 보이는 영역을 개발하는 포지션을 말하며 백 엔드(Back-end)와는 반대되는 의미. &#8617; 위탁판매업 : 상품의 생산자 또는 상인으로부터 그 상품의 판매를 위탁 받는 대신 매출액의 일정 비율 수수료 및 대금을 지불하는 등의 방식. &#8617; 부트캠프 : 단기간에 집중하여 코딩 지식을 가르치는 방식으로 소프트웨어 개발자를 양성하는 교육기관 또는 그 교육 프로그램을 말함. &#8617; " } ]
